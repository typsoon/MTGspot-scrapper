/*
 * This file is generated by jOOQ.
 */
package org.example.mtgspotscrapper.model.databaseClasses.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.example.mtgspotscrapper.model.databaseClasses.Keys;
import org.example.mtgspotscrapper.model.databaseClasses.Public;
import org.example.mtgspotscrapper.model.databaseClasses.tables.Cards.CardsPath;
import org.example.mtgspotscrapper.model.databaseClasses.tables.records.LocaladdressesRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Localaddresses extends TableImpl<LocaladdressesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.localaddresses</code>
     */
    public static final Localaddresses LOCALADDRESSES = new Localaddresses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LocaladdressesRecord> getRecordType() {
        return LocaladdressesRecord.class;
    }

    /**
     * The column <code>public.localaddresses.multiverse_id</code>.
     */
    public final TableField<LocaladdressesRecord, Integer> MULTIVERSE_ID = createField(DSL.name("multiverse_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.localaddresses.local_address</code>.
     */
    public final TableField<LocaladdressesRecord, String> LOCAL_ADDRESS = createField(DSL.name("local_address"), SQLDataType.VARCHAR.nullable(false), this, "");

    private Localaddresses(Name alias, Table<LocaladdressesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Localaddresses(Name alias, Table<LocaladdressesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.localaddresses</code> table reference
     */
    public Localaddresses(String alias) {
        this(DSL.name(alias), LOCALADDRESSES);
    }

    /**
     * Create an aliased <code>public.localaddresses</code> table reference
     */
    public Localaddresses(Name alias) {
        this(alias, LOCALADDRESSES);
    }

    /**
     * Create a <code>public.localaddresses</code> table reference
     */
    public Localaddresses() {
        this(DSL.name("localaddresses"), null);
    }

    public <O extends Record> Localaddresses(Table<O> path, ForeignKey<O, LocaladdressesRecord> childPath, InverseForeignKey<O, LocaladdressesRecord> parentPath) {
        super(path, childPath, parentPath, LOCALADDRESSES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LocaladdressesPath extends Localaddresses implements Path<LocaladdressesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LocaladdressesPath(Table<O> path, ForeignKey<O, LocaladdressesRecord> childPath, InverseForeignKey<O, LocaladdressesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LocaladdressesPath(Name alias, Table<LocaladdressesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LocaladdressesPath as(String alias) {
            return new LocaladdressesPath(DSL.name(alias), this);
        }

        @Override
        public LocaladdressesPath as(Name alias) {
            return new LocaladdressesPath(alias, this);
        }

        @Override
        public LocaladdressesPath as(Table<?> alias) {
            return new LocaladdressesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<LocaladdressesRecord> getPrimaryKey() {
        return Keys.LOCALADDRESSES_PKEY;
    }

    @Override
    public List<UniqueKey<LocaladdressesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.LOCALADDRESSES_LOCAL_ADDRESS_KEY);
    }

    @Override
    public List<ForeignKey<LocaladdressesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LOCALADDRESSES__LOCALADDRESSES_MULTIVERSE_ID_FKEY);
    }

    private transient CardsPath _cards;

    /**
     * Get the implicit join path to the <code>public.cards</code> table.
     */
    public CardsPath cards() {
        if (_cards == null)
            _cards = new CardsPath(this, Keys.LOCALADDRESSES__LOCALADDRESSES_MULTIVERSE_ID_FKEY, null);

        return _cards;
    }

    @Override
    public Localaddresses as(String alias) {
        return new Localaddresses(DSL.name(alias), this);
    }

    @Override
    public Localaddresses as(Name alias) {
        return new Localaddresses(alias, this);
    }

    @Override
    public Localaddresses as(Table<?> alias) {
        return new Localaddresses(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Localaddresses rename(String name) {
        return new Localaddresses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Localaddresses rename(Name name) {
        return new Localaddresses(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Localaddresses rename(Table<?> name) {
        return new Localaddresses(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Localaddresses where(Condition condition) {
        return new Localaddresses(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Localaddresses where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Localaddresses where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Localaddresses where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Localaddresses where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Localaddresses where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Localaddresses where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Localaddresses where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Localaddresses whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Localaddresses whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
