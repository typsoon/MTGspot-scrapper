/*
 * This file is generated by jOOQ.
 */
package org.example.mtgspotscrapper.model.databaseClasses.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.example.mtgspotscrapper.model.databaseClasses.Indexes;
import org.example.mtgspotscrapper.model.databaseClasses.Keys;
import org.example.mtgspotscrapper.model.databaseClasses.Public;
import org.example.mtgspotscrapper.model.databaseClasses.tables.Listcards.ListcardsPath;
import org.example.mtgspotscrapper.model.databaseClasses.tables.Lists.ListsPath;
import org.example.mtgspotscrapper.model.databaseClasses.tables.Localaddresses.LocaladdressesPath;
import org.example.mtgspotscrapper.model.databaseClasses.tables.records.CardsRecord;
import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Cards extends TableImpl<CardsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cards</code>
     */
    public static final Cards CARDS = new Cards();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardsRecord> getRecordType() {
        return CardsRecord.class;
    }

    /**
     * The column <code>public.cards.multiverse_id</code>.
     */
    public final TableField<CardsRecord, Integer> MULTIVERSE_ID = createField(DSL.name("multiverse_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.cards.card_name</code>.
     */
    public final TableField<CardsRecord, String> CARD_NAME = createField(DSL.name("card_name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.cards.previous_price</code>.
     */
    public final TableField<CardsRecord, BigDecimal> PREVIOUS_PRICE = createField(DSL.name("previous_price"), SQLDataType.NUMERIC(4, 2), this, "");

    /**
     * The column <code>public.cards.actual_price</code>.
     */
    public final TableField<CardsRecord, BigDecimal> ACTUAL_PRICE = createField(DSL.name("actual_price"), SQLDataType.NUMERIC(4, 2), this, "");

    /**
     * The column <code>public.cards.image_url</code>.
     */
    public final TableField<CardsRecord, String> IMAGE_URL = createField(DSL.name("image_url"), SQLDataType.VARCHAR.nullable(false), this, "");

    private Cards(Name alias, Table<CardsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Cards(Name alias, Table<CardsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.cards</code> table reference
     */
    public Cards(String alias) {
        this(DSL.name(alias), CARDS);
    }

    /**
     * Create an aliased <code>public.cards</code> table reference
     */
    public Cards(Name alias) {
        this(alias, CARDS);
    }

    /**
     * Create a <code>public.cards</code> table reference
     */
    public Cards() {
        this(DSL.name("cards"), null);
    }

    public <O extends Record> Cards(Table<O> path, ForeignKey<O, CardsRecord> childPath, InverseForeignKey<O, CardsRecord> parentPath) {
        super(path, childPath, parentPath, CARDS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CardsPath extends Cards implements Path<CardsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CardsPath(Table<O> path, ForeignKey<O, CardsRecord> childPath, InverseForeignKey<O, CardsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CardsPath(Name alias, Table<CardsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CardsPath as(String alias) {
            return new CardsPath(DSL.name(alias), this);
        }

        @Override
        public CardsPath as(Name alias) {
            return new CardsPath(alias, this);
        }

        @Override
        public CardsPath as(Table<?> alias) {
            return new CardsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CARDS_CARD_NAME_IDX);
    }

    @Override
    public UniqueKey<CardsRecord> getPrimaryKey() {
        return Keys.CARDS_PKEY;
    }

    @Override
    public List<UniqueKey<CardsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CARDS_CARD_NAME_KEY, Keys.CARDS_IMAGE_URL_KEY);
    }

    private transient ListcardsPath _listcards;

    /**
     * Get the implicit to-many join path to the <code>public.listcards</code>
     * table
     */
    public ListcardsPath listcards() {
        if (_listcards == null)
            _listcards = new ListcardsPath(this, null, Keys.LISTCARDS__LISTCARDS_MULTIVERSE_ID_FKEY.getInverseKey());

        return _listcards;
    }

    private transient LocaladdressesPath _localaddresses;

    /**
     * Get the implicit to-many join path to the
     * <code>public.localaddresses</code> table
     */
    public LocaladdressesPath localaddresses() {
        if (_localaddresses == null)
            _localaddresses = new LocaladdressesPath(this, null, Keys.LOCALADDRESSES__LOCALADDRESSES_MULTIVERSE_ID_FKEY.getInverseKey());

        return _localaddresses;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.lists</code>
     * table
     */
    public ListsPath lists() {
        return listcards().lists();
    }

    @Override
    public List<Check<CardsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("cards_actual_price_check"), "(((actual_price = ('-1'::integer)::numeric) OR (actual_price IS NULL) OR (actual_price > (0)::numeric)))", true),
            Internal.createCheck(this, DSL.name("cards_multiverse_id_check"), "((multiverse_id > 0))", true),
            Internal.createCheck(this, DSL.name("cards_previous_price_check"), "(((previous_price = ('-1'::integer)::numeric) OR (previous_price IS NULL) OR (previous_price > (0)::numeric)))", true)
        );
    }

    @Override
    public Cards as(String alias) {
        return new Cards(DSL.name(alias), this);
    }

    @Override
    public Cards as(Name alias) {
        return new Cards(alias, this);
    }

    @Override
    public Cards as(Table<?> alias) {
        return new Cards(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cards rename(String name) {
        return new Cards(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cards rename(Name name) {
        return new Cards(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cards rename(Table<?> name) {
        return new Cards(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cards where(Condition condition) {
        return new Cards(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cards where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cards where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cards where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cards where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cards where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cards where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cards where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cards whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cards whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
