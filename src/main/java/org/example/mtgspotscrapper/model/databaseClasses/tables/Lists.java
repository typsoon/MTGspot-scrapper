/*
 * This file is generated by jOOQ.
 */
package org.example.mtgspotscrapper.model.databaseClasses.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.example.mtgspotscrapper.model.databaseClasses.Indexes;
import org.example.mtgspotscrapper.model.databaseClasses.Keys;
import org.example.mtgspotscrapper.model.databaseClasses.Public;
import org.example.mtgspotscrapper.model.databaseClasses.tables.Cards.CardsPath;
import org.example.mtgspotscrapper.model.databaseClasses.tables.Listcards.ListcardsPath;
import org.example.mtgspotscrapper.model.databaseClasses.tables.Listslogos.ListslogosPath;
import org.example.mtgspotscrapper.model.databaseClasses.tables.records.ListsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Lists extends TableImpl<ListsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lists</code>
     */
    public static final Lists LISTS = new Lists();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ListsRecord> getRecordType() {
        return ListsRecord.class;
    }

    /**
     * The column <code>public.lists.list_id</code>.
     */
    public final TableField<ListsRecord, Integer> LIST_ID = createField(DSL.name("list_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lists.list_name</code>.
     */
    public final TableField<ListsRecord, String> LIST_NAME = createField(DSL.name("list_name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.lists.logo_id</code>.
     */
    public final TableField<ListsRecord, Integer> LOGO_ID = createField(DSL.name("logo_id"), SQLDataType.INTEGER, this, "");

    private Lists(Name alias, Table<ListsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Lists(Name alias, Table<ListsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.lists</code> table reference
     */
    public Lists(String alias) {
        this(DSL.name(alias), LISTS);
    }

    /**
     * Create an aliased <code>public.lists</code> table reference
     */
    public Lists(Name alias) {
        this(alias, LISTS);
    }

    /**
     * Create a <code>public.lists</code> table reference
     */
    public Lists() {
        this(DSL.name("lists"), null);
    }

    public <O extends Record> Lists(Table<O> path, ForeignKey<O, ListsRecord> childPath, InverseForeignKey<O, ListsRecord> parentPath) {
        super(path, childPath, parentPath, LISTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ListsPath extends Lists implements Path<ListsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ListsPath(Table<O> path, ForeignKey<O, ListsRecord> childPath, InverseForeignKey<O, ListsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ListsPath(Name alias, Table<ListsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ListsPath as(String alias) {
            return new ListsPath(DSL.name(alias), this);
        }

        @Override
        public ListsPath as(Name alias) {
            return new ListsPath(alias, this);
        }

        @Override
        public ListsPath as(Table<?> alias) {
            return new ListsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.LISTS_LIST_NAME_IDX);
    }

    @Override
    public Identity<ListsRecord, Integer> getIdentity() {
        return (Identity<ListsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ListsRecord> getPrimaryKey() {
        return Keys.LISTS_PKEY;
    }

    @Override
    public List<UniqueKey<ListsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.LISTS_LIST_NAME_KEY);
    }

    @Override
    public List<ForeignKey<ListsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LISTS__LISTS_LOGO_ID_FKEY);
    }

    private transient ListslogosPath _listslogos;

    /**
     * Get the implicit join path to the <code>public.listslogos</code> table.
     */
    public ListslogosPath listslogos() {
        if (_listslogos == null)
            _listslogos = new ListslogosPath(this, Keys.LISTS__LISTS_LOGO_ID_FKEY, null);

        return _listslogos;
    }

    private transient ListcardsPath _listcards;

    /**
     * Get the implicit to-many join path to the <code>public.listcards</code>
     * table
     */
    public ListcardsPath listcards() {
        if (_listcards == null)
            _listcards = new ListcardsPath(this, null, Keys.LISTCARDS__LISTCARDS_LIST_ID_FKEY.getInverseKey());

        return _listcards;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.cards</code>
     * table
     */
    public CardsPath cards() {
        return listcards().cards();
    }

    @Override
    public Lists as(String alias) {
        return new Lists(DSL.name(alias), this);
    }

    @Override
    public Lists as(Name alias) {
        return new Lists(alias, this);
    }

    @Override
    public Lists as(Table<?> alias) {
        return new Lists(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lists rename(String name) {
        return new Lists(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lists rename(Name name) {
        return new Lists(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lists rename(Table<?> name) {
        return new Lists(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lists where(Condition condition) {
        return new Lists(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lists where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lists where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lists where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lists where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lists where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lists where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lists where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lists whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lists whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
