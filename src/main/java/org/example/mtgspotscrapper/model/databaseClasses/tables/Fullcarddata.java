/*
 * This file is generated by jOOQ.
 */
package org.example.mtgspotscrapper.model.databaseClasses.tables;


import java.math.BigDecimal;
import java.util.Collection;

import org.example.mtgspotscrapper.model.databaseClasses.Public;
import org.example.mtgspotscrapper.model.databaseClasses.tables.records.FullcarddataRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Fullcarddata extends TableImpl<FullcarddataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.fullcarddata</code>
     */
    public static final Fullcarddata FULLCARDDATA = new Fullcarddata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FullcarddataRecord> getRecordType() {
        return FullcarddataRecord.class;
    }

    /**
     * The column <code>public.fullcarddata.multiverse_id</code>.
     */
    public final TableField<FullcarddataRecord, Integer> MULTIVERSE_ID = createField(DSL.name("multiverse_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.fullcarddata.card_name</code>.
     */
    public final TableField<FullcarddataRecord, String> CARD_NAME = createField(DSL.name("card_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.fullcarddata.previous_price</code>.
     */
    public final TableField<FullcarddataRecord, BigDecimal> PREVIOUS_PRICE = createField(DSL.name("previous_price"), SQLDataType.NUMERIC(4, 2), this, "");

    /**
     * The column <code>public.fullcarddata.actual_price</code>.
     */
    public final TableField<FullcarddataRecord, BigDecimal> ACTUAL_PRICE = createField(DSL.name("actual_price"), SQLDataType.NUMERIC(4, 2), this, "");

    /**
     * The column <code>public.fullcarddata.image_url</code>.
     */
    public final TableField<FullcarddataRecord, String> IMAGE_URL = createField(DSL.name("image_url"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.fullcarddata.local_address</code>.
     */
    public final TableField<FullcarddataRecord, String> LOCAL_ADDRESS = createField(DSL.name("local_address"), SQLDataType.VARCHAR, this, "");

    private Fullcarddata(Name alias, Table<FullcarddataRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Fullcarddata(Name alias, Table<FullcarddataRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "fullcarddata" as  SELECT cards.multiverse_id,
         cards.card_name,
         cards.previous_price,
         cards.actual_price,
         cards.image_url,
         localaddresses.local_address
        FROM (cards
          LEFT JOIN localaddresses USING (multiverse_id));
        """), where);
    }

    /**
     * Create an aliased <code>public.fullcarddata</code> table reference
     */
    public Fullcarddata(String alias) {
        this(DSL.name(alias), FULLCARDDATA);
    }

    /**
     * Create an aliased <code>public.fullcarddata</code> table reference
     */
    public Fullcarddata(Name alias) {
        this(alias, FULLCARDDATA);
    }

    /**
     * Create a <code>public.fullcarddata</code> table reference
     */
    public Fullcarddata() {
        this(DSL.name("fullcarddata"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Fullcarddata as(String alias) {
        return new Fullcarddata(DSL.name(alias), this);
    }

    @Override
    public Fullcarddata as(Name alias) {
        return new Fullcarddata(alias, this);
    }

    @Override
    public Fullcarddata as(Table<?> alias) {
        return new Fullcarddata(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Fullcarddata rename(String name) {
        return new Fullcarddata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Fullcarddata rename(Name name) {
        return new Fullcarddata(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Fullcarddata rename(Table<?> name) {
        return new Fullcarddata(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Fullcarddata where(Condition condition) {
        return new Fullcarddata(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Fullcarddata where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Fullcarddata where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Fullcarddata where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Fullcarddata where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Fullcarddata where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Fullcarddata where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Fullcarddata where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Fullcarddata whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Fullcarddata whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
