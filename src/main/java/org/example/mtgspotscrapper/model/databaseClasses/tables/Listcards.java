/*
 * This file is generated by jOOQ.
 */
package org.example.mtgspotscrapper.model.databaseClasses.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.example.mtgspotscrapper.model.databaseClasses.Keys;
import org.example.mtgspotscrapper.model.databaseClasses.Public;
import org.example.mtgspotscrapper.model.databaseClasses.tables.Cards.CardsPath;
import org.example.mtgspotscrapper.model.databaseClasses.tables.Lists.ListsPath;
import org.example.mtgspotscrapper.model.databaseClasses.tables.records.ListcardsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Listcards extends TableImpl<ListcardsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.listcards</code>
     */
    public static final Listcards LISTCARDS = new Listcards();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ListcardsRecord> getRecordType() {
        return ListcardsRecord.class;
    }

    /**
     * The column <code>public.listcards.list_id</code>.
     */
    public final TableField<ListcardsRecord, Integer> LIST_ID = createField(DSL.name("list_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.listcards.multiverse_id</code>.
     */
    public final TableField<ListcardsRecord, Integer> MULTIVERSE_ID = createField(DSL.name("multiverse_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Listcards(Name alias, Table<ListcardsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Listcards(Name alias, Table<ListcardsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.listcards</code> table reference
     */
    public Listcards(String alias) {
        this(DSL.name(alias), LISTCARDS);
    }

    /**
     * Create an aliased <code>public.listcards</code> table reference
     */
    public Listcards(Name alias) {
        this(alias, LISTCARDS);
    }

    /**
     * Create a <code>public.listcards</code> table reference
     */
    public Listcards() {
        this(DSL.name("listcards"), null);
    }

    public <O extends Record> Listcards(Table<O> path, ForeignKey<O, ListcardsRecord> childPath, InverseForeignKey<O, ListcardsRecord> parentPath) {
        super(path, childPath, parentPath, LISTCARDS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ListcardsPath extends Listcards implements Path<ListcardsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ListcardsPath(Table<O> path, ForeignKey<O, ListcardsRecord> childPath, InverseForeignKey<O, ListcardsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ListcardsPath(Name alias, Table<ListcardsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ListcardsPath as(String alias) {
            return new ListcardsPath(DSL.name(alias), this);
        }

        @Override
        public ListcardsPath as(Name alias) {
            return new ListcardsPath(alias, this);
        }

        @Override
        public ListcardsPath as(Table<?> alias) {
            return new ListcardsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<ListcardsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.LISTCARDS_LIST_ID_MULTIVERSE_ID_KEY);
    }

    @Override
    public List<ForeignKey<ListcardsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LISTCARDS__LISTCARDS_LIST_ID_FKEY, Keys.LISTCARDS__LISTCARDS_MULTIVERSE_ID_FKEY);
    }

    private transient ListsPath _lists;

    /**
     * Get the implicit join path to the <code>public.lists</code> table.
     */
    public ListsPath lists() {
        if (_lists == null)
            _lists = new ListsPath(this, Keys.LISTCARDS__LISTCARDS_LIST_ID_FKEY, null);

        return _lists;
    }

    private transient CardsPath _cards;

    /**
     * Get the implicit join path to the <code>public.cards</code> table.
     */
    public CardsPath cards() {
        if (_cards == null)
            _cards = new CardsPath(this, Keys.LISTCARDS__LISTCARDS_MULTIVERSE_ID_FKEY, null);

        return _cards;
    }

    @Override
    public Listcards as(String alias) {
        return new Listcards(DSL.name(alias), this);
    }

    @Override
    public Listcards as(Name alias) {
        return new Listcards(alias, this);
    }

    @Override
    public Listcards as(Table<?> alias) {
        return new Listcards(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Listcards rename(String name) {
        return new Listcards(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Listcards rename(Name name) {
        return new Listcards(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Listcards rename(Table<?> name) {
        return new Listcards(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Listcards where(Condition condition) {
        return new Listcards(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Listcards where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Listcards where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Listcards where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Listcards where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Listcards where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Listcards where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Listcards where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Listcards whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Listcards whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
