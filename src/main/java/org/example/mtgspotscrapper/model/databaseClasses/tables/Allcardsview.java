/*
 * This file is generated by jOOQ.
 */
package org.example.mtgspotscrapper.model.databaseClasses.tables;


import java.util.Collection;

import org.example.mtgspotscrapper.model.databaseClasses.Scrapper;
import org.example.mtgspotscrapper.model.databaseClasses.tables.records.AllcardsviewRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Allcardsview extends TableImpl<AllcardsviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>scrapper.allcardsview</code>
     */
    public static final Allcardsview ALLCARDSVIEW = new Allcardsview();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AllcardsviewRecord> getRecordType() {
        return AllcardsviewRecord.class;
    }

    /**
     * The column <code>scrapper.allcardsview.multiverse_id</code>.
     */
    public final TableField<AllcardsviewRecord, Integer> MULTIVERSE_ID = createField(DSL.name("multiverse_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>scrapper.allcardsview.card_name</code>.
     */
    public final TableField<AllcardsviewRecord, String> CARD_NAME = createField(DSL.name("card_name"), SQLDataType.VARCHAR, this, "");

    private Allcardsview(Name alias, Table<AllcardsviewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Allcardsview(Name alias, Table<AllcardsviewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "allcardsview" as  SELECT allcards.multiverse_id,
         allcards.card_name
        FROM allcards;
        """), where);
    }

    /**
     * Create an aliased <code>scrapper.allcardsview</code> table reference
     */
    public Allcardsview(String alias) {
        this(DSL.name(alias), ALLCARDSVIEW);
    }

    /**
     * Create an aliased <code>scrapper.allcardsview</code> table reference
     */
    public Allcardsview(Name alias) {
        this(alias, ALLCARDSVIEW);
    }

    /**
     * Create a <code>scrapper.allcardsview</code> table reference
     */
    public Allcardsview() {
        this(DSL.name("allcardsview"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Scrapper.SCRAPPER;
    }

    @Override
    public Allcardsview as(String alias) {
        return new Allcardsview(DSL.name(alias), this);
    }

    @Override
    public Allcardsview as(Name alias) {
        return new Allcardsview(alias, this);
    }

    @Override
    public Allcardsview as(Table<?> alias) {
        return new Allcardsview(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Allcardsview rename(String name) {
        return new Allcardsview(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Allcardsview rename(Name name) {
        return new Allcardsview(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Allcardsview rename(Table<?> name) {
        return new Allcardsview(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Allcardsview where(Condition condition) {
        return new Allcardsview(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Allcardsview where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Allcardsview where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Allcardsview where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Allcardsview where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Allcardsview where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Allcardsview where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Allcardsview where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Allcardsview whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Allcardsview whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
